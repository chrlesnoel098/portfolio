.Accueil {
	height: 100vh;

	.section-1 {
    h1{
      font-size: 3em;
      margin-bottom: -1.5em;
      -webkit-text-stroke-width: 1px;
      font-style: italic;
    }
		h2 {
			display: flex;
			justify-content: center;
			align-items: center;
      -webkit-text-fill-color: rgba(255, 255, 255, 0); /* Will override color (regardless of order) */
      -webkit-text-stroke-width: 1px;
      -webkit-text-stroke-color: black;
      font-style: italic;
			font-size: 3em;
		}

		.plus {
			display: flex;
			justify-content: center;
			align-items: center;
			margin-top: 20vh;

			svg.MuiSvgIcon-root {
				color: black;
				font-size: 5em;
        animation: animate 2s infinite ease-out;

				&:hover {
          -webkit-animation-play-state: paused;
          animation-play-state: paused;
					color: gray;
					cursor: pointer;
				}
			}

      @keyframes animate {
        0%{
            opacity: 0;
            transform: translateY(-20px);
        }
        50%{
            opacity: 1;
        }
        100%{
            transform: translateY(20px);
        }
    }

		}
	}

	.section-2 {
		top: -250px;
		.navSecondaire {
			margin-top: 100vh;
			display: flex;
			justify-content: center;
			align-items: center;

			li {
				display: flex;
				margin: 0 0 20px 20px;
			}
		}
	}
}

.social-container {
	padding: 25px 50px;
	display: flex;
	justify-content: center;
	align-items: center;
	a.social {
		margin: 0 auto;
		transition: transform 250ms;
		transition: color 250ms;
		display: inline-block;
	}

	a.social:hover {
		transform: translateY(-2px);
		color: grey;
	}

	a.linkedin {
		color: black;
	}

	a.github {
		color: black;
	}

	a.behance {
		color: black;
	}

	a.sketchfab {
		color: black;
		width: 1.8em;
	}
}

// Here's the meat and potatoes.

/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy { 
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.glitch {
position: relative;
color: rgb(0, 0, 0);
/* Animation provies a slight random skew. Check bottom of doc
for more information on how to random skew. */
animation: glitch-skew 1s forwards ease-in-out alternate-reverse;

// Creates a copy before our text. 
&::before{
  // Duplicates our text with the mixin.
  @include glitchCopy;
  // Scoots text slightly to the left for the color offset.
  left: 2px;
  // Creates the color 'shadow' that happens on the glitch.
  text-shadow: -2px 0 #bababa;
  /* Creates an initial clip for our glitch. This works in
  a typical top,right,bottom,left fashion and creates a mask
  to only show a certain part of the glitch at a time. */
  clip: rect(44px, 450px, 56px, 0);
  /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
  with an alternating animation to keep things fresh. */
  animation: glitch-anim 5s forwards ease-in-out alternate-reverse;
}

// Creates a copy after our text. Note comments from ::before.
&::after {
  @include glitchCopy;
  left: -2px;
  text-shadow: -2px 0 #5e5e5e, 2px 2px #bababa;
  animation: glitch-anim2 5s forwards ease-in-out alternate-reverse;
}
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
$steps: 20;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    clip: rect(random(100)+px, 9999px, random(100)+px, 0);
    transform: skew((random(100) / 100) + deg);
  }
}
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
$steps: 20;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    clip: rect(random(100)+px, 9999px, random(100)+px, 0);
    transform: skew((random(100) / 100) + deg);
  }
}
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
$steps: 10;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    transform: skew((random(10) - 5) + deg);
  }
}}